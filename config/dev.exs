import Config

{project_path, 0} = System.cmd("pwd", [])
project_path = String.replace(project_path, ~r/\n/, "/")

config :git_hooks,
  hooks: [
    pre_commit: [
      tasks: [
        {:mix_task, :format},
        {:mix_task, :credo, ["--strict"]}
      ]
    ],
    pre_push: [
      tasks: [
        {:cmd, "mix compile --force --warnings-as-errors"},
        {:mix_task, :format, ["--check-formatted"]},
        {:mix_task, :dialyzer, ["--force-check"]},
        {:mix_task, :credo, ["--strict"]},
        {:cmd, "mix compile --force --warnings-as-errors", env: [{"MIX_ENV", "test"}]},
        {:mix_task, :test, ["--color"]},
        {:cmd, "mix coveralls.cobertura"},
        {:cmd, "echo 'success!' ðŸŽ‰"}
      ]
    ]
  ],
  project_path: project_path

config :beam_bot,
  env: :dev

config :beam_bot,
  max_best_trading_pairs_small_investor_concurrency: 10,
  sync_all_historical_data_for_platform_concurrent_pairs: 1

# Configure your database
config :beam_bot, BeamBot.Repo,
  username: "postgres",
  password: "postgres",
  hostname: "localhost",
  database: "beam_bot_dev",
  port: 5465,
  stacktrace: true,
  show_sensitive_data_on_connection_error: true,
  pool_size: 50

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we can use it
# to bundle .js and .css sources.
config :beam_bot, BeamBotWeb.Endpoint,
  # Binding to loopback ipv4 address prevents access from other machines.
  # Change to `ip: {0, 0, 0, 0}` to allow access from other machines.
  http: [ip: {127, 0, 0, 1}, port: 4000],
  check_origin: false,
  code_reloader: true,
  debug_errors: true,
  secret_key_base: "8+WSAljwetlaWXcm0fNIngINfYdDNCl1nXNZi6nyefXzJbCUoX4vi7EziMbrh0Sc",
  watchers: [
    node: ["build.js", "--watch", cd: Path.expand("../assets", __DIR__)],
    # esbuild: {Esbuild, :install_and_run, [:beam_bot, ~w(--sourcemap=inline --watch)]},
    tailwind: {Tailwind, :install_and_run, [:beam_bot, ~w(--watch)]}
  ]

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Watch static and templates for browser reloading.
config :beam_bot, BeamBotWeb.Endpoint,
  live_reload: [
    patterns: [
      ~r"priv/static/(?!uploads/).*(js|css|png|jpeg|jpg|gif|svg)$",
      ~r"priv/gettext/.*(po)$",
      ~r"lib/beam_bot_web/(controllers|live|components)/.*(ex|heex)$"
    ]
  ]

# Enable dev routes for dashboard and mailbox
config :beam_bot, dev_routes: true

# Do not include metadata nor timestamps in development logs
config :logger, :console, format: "[$level] $message\n"
config :logger, level: :info

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

# Initialize plugs at runtime for faster development compilation
config :phoenix, :plug_init_mode, :runtime

config :phoenix_live_view,
  # Include HEEx debug annotations as HTML comments in rendered markup
  debug_heex_annotations: true,
  # Enable helpful, but potentially expensive runtime checks
  enable_expensive_runtime_checks: true

# Disable swoosh api client as it is only required for production adapters.
config :swoosh, :api_client, false
